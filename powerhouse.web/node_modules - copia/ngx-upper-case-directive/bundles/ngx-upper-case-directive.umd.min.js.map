{"version":3,"sources":["ng://ngx-upper-case-directive/ngx-upper-case.directive.ts","ng://ngx-upper-case-directive/ngx-upper-case-directive.module.ts"],"names":["NgxUpperCaseDirective","prototype","getCaret","el","start","selectionStart","end","selectionEnd","setCaret","focus","dispatchEvent","eventType","event","document","createEvent","initEvent","convertValue","value","toUpperCase","this","onBlur","upperCase","onInput","_a","Directive","args","selector","Input","HostListener","NgxUpperCaseDirectiveModule","NgModule","imports","declarations","exports"],"mappings":"8RAAA,IAAAA,EAAA,gCAaUA,EAAAC,UAAAC,kBAAUC,GAEhB,MAAO,CACLC,MAAOD,EAAGE,eACVC,IAAKH,EAAGI,eAKJP,EAAAC,UAAAO,kBAAUL,EAAIC,EAAOE,GAE3BH,EAAGE,eAAiBD,EACpBD,EAAGI,aAAeD,EAElBH,EAAGM,SAIGT,EAAAC,UAAAS,uBAAeP,EAAIQ,GAEzB,IAAMC,EAAQC,SAASC,YAAY,SACnCF,EAAMG,UAAUJ,GAAW,GAAO,GAClCR,EAAGO,cAAcE,IAIXZ,EAAAC,UAAAe,sBAAcb,EAAIc,GAExBd,EAAGc,MAAQA,EAAMC,cAEjBC,KAAKT,cAAcP,EAAI,UAKzBH,EAAAC,UAAAmB,gBAAQjB,EAASc,GAETE,KAAKE,WAAa,SAAWF,KAAKE,WAAc,mBAAsBJ,EAAMC,aAAeD,EAAMC,gBAAkBD,IAEvHE,KAAKH,aAAab,EAAIc,GACtBE,KAAKT,cAAcP,EAAI,UAO3BH,EAAAC,UAAAqB,iBAASnB,EAASc,GAEhB,IAAKE,KAAKE,WAAa,mBAAsBJ,EAAMC,aAAeD,EAAMC,gBAAkBD,EAAO,CAE/F,IAAAM,EAAAJ,KAAAjB,SAAAC,GAAMC,EAAAmB,EAAAnB,MAAOE,EAAAiB,EAAAjB,IAEI,MAAbW,EAAM,IAAwB,IAAVb,GAAuB,IAARE,IAGrCA,EADAF,EAAQ,GAKVe,KAAKH,aAAab,EAAIc,GAEtBE,KAAKX,SAASL,EAAIC,EAAOE,yBArE9BkB,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,gHAITC,EAAAA,sBAoCAC,EAAAA,aAAYH,KAAA,CAAC,OAAQ,CAAC,gBAAiB,yCAYvCG,EAAAA,aAAYH,KAAA,CAAC,QAAS,CAAC,gBAAiB,6BA3D3C,GCAAI,EAAA,oDAGCC,EAAAA,SAAQL,KAAA,CAAC,CACRM,QAAS,GACTC,aAAc,CAAChC,GACfiC,QAAS,CAACjC,SANZ","sourcesContent":["import {\n  Directive,\n  HostListener,\n  Input,\n} from '@angular/core';\n\n@Directive({\n  selector: 'input[upperCase]:not([lowerCase]),textarea[upperCase]:not([lowerCase])',\n})\nexport class NgxUpperCaseDirective {\n\n  @Input() upperCase: string;\n\n  private getCaret (el) {\n\n    return {\n      start: el.selectionStart,\n      end: el.selectionEnd,\n    };\n\n  }\n\n  private setCaret (el, start, end) {\n\n    el.selectionStart = start;\n    el.selectionEnd = end;\n\n    el.focus();\n\n  }\n\n  private dispatchEvent (el, eventType) {\n\n    const event = document.createEvent('Event');\n    event.initEvent(eventType, false, false);\n    el.dispatchEvent(event);\n\n  }\n\n  private convertValue (el, value) {\n\n    el.value = value.toUpperCase();\n\n    this.dispatchEvent(el, 'input');\n\n  }\n\n  @HostListener('blur', ['$event.target', '$event.target.value'])\n  onBlur (el: any, value: string): void {\n\n    if ((!this.upperCase || 'blur' === this.upperCase) && 'function' === typeof value.toUpperCase && value.toUpperCase() !== value) {\n\n      this.convertValue(el, value);\n      this.dispatchEvent(el, 'blur'); // in case updateOn is set to blur\n\n    }\n\n  }\n\n  @HostListener('input', ['$event.target', '$event.target.value'])\n  onInput (el: any, value: string): void {\n\n    if (!this.upperCase && 'function' === typeof value.toUpperCase && value.toUpperCase() !== value) {\n\n      let { start, end } = this.getCaret(el);\n\n      if (value[0] === ' ' && start === 1 && end === 1) {\n\n        start = 0;\n        end = 0;\n\n      }\n\n      this.convertValue(el, value);\n\n      this.setCaret(el, start, end);\n\n    }\n\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { NgxUpperCaseDirective } from './ngx-upper-case.directive';\n\n@NgModule({\n  imports: [],\n  declarations: [NgxUpperCaseDirective],\n  exports: [NgxUpperCaseDirective],\n})\nexport class NgxUpperCaseDirectiveModule {\n}\n"]}