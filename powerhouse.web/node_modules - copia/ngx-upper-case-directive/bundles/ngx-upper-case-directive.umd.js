(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('ngx-upper-case-directive', ['exports', '@angular/core'], factory) :
    (factory((global['ngx-upper-case-directive'] = {}),global.ng.core));
}(this, (function (exports,core) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NgxUpperCaseDirective = (function () {
        function NgxUpperCaseDirective() {
        }
        /**
         * @param {?} el
         * @return {?}
         */
        NgxUpperCaseDirective.prototype.getCaret = /**
         * @param {?} el
         * @return {?}
         */
            function (el) {
                return {
                    start: el.selectionStart,
                    end: el.selectionEnd,
                };
            };
        /**
         * @param {?} el
         * @param {?} start
         * @param {?} end
         * @return {?}
         */
        NgxUpperCaseDirective.prototype.setCaret = /**
         * @param {?} el
         * @param {?} start
         * @param {?} end
         * @return {?}
         */
            function (el, start, end) {
                el.selectionStart = start;
                el.selectionEnd = end;
                el.focus();
            };
        /**
         * @param {?} el
         * @param {?} eventType
         * @return {?}
         */
        NgxUpperCaseDirective.prototype.dispatchEvent = /**
         * @param {?} el
         * @param {?} eventType
         * @return {?}
         */
            function (el, eventType) {
                var /** @type {?} */ event = document.createEvent('Event');
                event.initEvent(eventType, false, false);
                el.dispatchEvent(event);
            };
        /**
         * @param {?} el
         * @param {?} value
         * @return {?}
         */
        NgxUpperCaseDirective.prototype.convertValue = /**
         * @param {?} el
         * @param {?} value
         * @return {?}
         */
            function (el, value) {
                el.value = value.toUpperCase();
                this.dispatchEvent(el, 'input');
            };
        /**
         * @param {?} el
         * @param {?} value
         * @return {?}
         */
        NgxUpperCaseDirective.prototype.onBlur = /**
         * @param {?} el
         * @param {?} value
         * @return {?}
         */
            function (el, value) {
                if ((!this.upperCase || 'blur' === this.upperCase) && 'function' === typeof value.toUpperCase && value.toUpperCase() !== value) {
                    this.convertValue(el, value);
                    this.dispatchEvent(el, 'blur'); // in case updateOn is set to blur
                }
            };
        /**
         * @param {?} el
         * @param {?} value
         * @return {?}
         */
        NgxUpperCaseDirective.prototype.onInput = /**
         * @param {?} el
         * @param {?} value
         * @return {?}
         */
            function (el, value) {
                if (!this.upperCase && 'function' === typeof value.toUpperCase && value.toUpperCase() !== value) {
                    var _a = this.getCaret(el), start = _a.start, end = _a.end;
                    if (value[0] === ' ' && start === 1 && end === 1) {
                        start = 0;
                        end = 0;
                    }
                    this.convertValue(el, value);
                    this.setCaret(el, start, end);
                }
            };
        NgxUpperCaseDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: 'input[upperCase]:not([lowerCase]),textarea[upperCase]:not([lowerCase])',
                    },] },
        ];
        /** @nocollapse */
        NgxUpperCaseDirective.propDecorators = {
            "upperCase": [{ type: core.Input },],
            "onBlur": [{ type: core.HostListener, args: ['blur', ['$event.target', '$event.target.value'],] },],
            "onInput": [{ type: core.HostListener, args: ['input', ['$event.target', '$event.target.value'],] },],
        };
        return NgxUpperCaseDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NgxUpperCaseDirectiveModule = (function () {
        function NgxUpperCaseDirectiveModule() {
        }
        NgxUpperCaseDirectiveModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [],
                        declarations: [NgxUpperCaseDirective],
                        exports: [NgxUpperCaseDirective],
                    },] },
        ];
        return NgxUpperCaseDirectiveModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.NgxUpperCaseDirective = NgxUpperCaseDirective;
    exports.NgxUpperCaseDirectiveModule = NgxUpperCaseDirectiveModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXVwcGVyLWNhc2UtZGlyZWN0aXZlLnVtZC5qcy5tYXAiLCJzb3VyY2VzIjpbIm5nOi8vbmd4LXVwcGVyLWNhc2UtZGlyZWN0aXZlL25neC11cHBlci1jYXNlLmRpcmVjdGl2ZS50cyIsIm5nOi8vbmd4LXVwcGVyLWNhc2UtZGlyZWN0aXZlL25neC11cHBlci1jYXNlLWRpcmVjdGl2ZS5tb2R1bGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRGlyZWN0aXZlLFxuICBIb3N0TGlzdGVuZXIsXG4gIElucHV0LFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnaW5wdXRbdXBwZXJDYXNlXTpub3QoW2xvd2VyQ2FzZV0pLHRleHRhcmVhW3VwcGVyQ2FzZV06bm90KFtsb3dlckNhc2VdKScsXG59KVxuZXhwb3J0IGNsYXNzIE5neFVwcGVyQ2FzZURpcmVjdGl2ZSB7XG5cbiAgQElucHV0KCkgdXBwZXJDYXNlOiBzdHJpbmc7XG5cbiAgcHJpdmF0ZSBnZXRDYXJldCAoZWwpIHtcblxuICAgIHJldHVybiB7XG4gICAgICBzdGFydDogZWwuc2VsZWN0aW9uU3RhcnQsXG4gICAgICBlbmQ6IGVsLnNlbGVjdGlvbkVuZCxcbiAgICB9O1xuXG4gIH1cblxuICBwcml2YXRlIHNldENhcmV0IChlbCwgc3RhcnQsIGVuZCkge1xuXG4gICAgZWwuc2VsZWN0aW9uU3RhcnQgPSBzdGFydDtcbiAgICBlbC5zZWxlY3Rpb25FbmQgPSBlbmQ7XG5cbiAgICBlbC5mb2N1cygpO1xuXG4gIH1cblxuICBwcml2YXRlIGRpc3BhdGNoRXZlbnQgKGVsLCBldmVudFR5cGUpIHtcblxuICAgIGNvbnN0IGV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0V2ZW50Jyk7XG4gICAgZXZlbnQuaW5pdEV2ZW50KGV2ZW50VHlwZSwgZmFsc2UsIGZhbHNlKTtcbiAgICBlbC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcblxuICB9XG5cbiAgcHJpdmF0ZSBjb252ZXJ0VmFsdWUgKGVsLCB2YWx1ZSkge1xuXG4gICAgZWwudmFsdWUgPSB2YWx1ZS50b1VwcGVyQ2FzZSgpO1xuXG4gICAgdGhpcy5kaXNwYXRjaEV2ZW50KGVsLCAnaW5wdXQnKTtcblxuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignYmx1cicsIFsnJGV2ZW50LnRhcmdldCcsICckZXZlbnQudGFyZ2V0LnZhbHVlJ10pXG4gIG9uQmx1ciAoZWw6IGFueSwgdmFsdWU6IHN0cmluZyk6IHZvaWQge1xuXG4gICAgaWYgKCghdGhpcy51cHBlckNhc2UgfHwgJ2JsdXInID09PSB0aGlzLnVwcGVyQ2FzZSkgJiYgJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIHZhbHVlLnRvVXBwZXJDYXNlICYmIHZhbHVlLnRvVXBwZXJDYXNlKCkgIT09IHZhbHVlKSB7XG5cbiAgICAgIHRoaXMuY29udmVydFZhbHVlKGVsLCB2YWx1ZSk7XG4gICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoZWwsICdibHVyJyk7IC8vIGluIGNhc2UgdXBkYXRlT24gaXMgc2V0IHRvIGJsdXJcblxuICAgIH1cblxuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignaW5wdXQnLCBbJyRldmVudC50YXJnZXQnLCAnJGV2ZW50LnRhcmdldC52YWx1ZSddKVxuICBvbklucHV0IChlbDogYW55LCB2YWx1ZTogc3RyaW5nKTogdm9pZCB7XG5cbiAgICBpZiAoIXRoaXMudXBwZXJDYXNlICYmICdmdW5jdGlvbicgPT09IHR5cGVvZiB2YWx1ZS50b1VwcGVyQ2FzZSAmJiB2YWx1ZS50b1VwcGVyQ2FzZSgpICE9PSB2YWx1ZSkge1xuXG4gICAgICBsZXQgeyBzdGFydCwgZW5kIH0gPSB0aGlzLmdldENhcmV0KGVsKTtcblxuICAgICAgaWYgKHZhbHVlWzBdID09PSAnICcgJiYgc3RhcnQgPT09IDEgJiYgZW5kID09PSAxKSB7XG5cbiAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgICBlbmQgPSAwO1xuXG4gICAgICB9XG5cbiAgICAgIHRoaXMuY29udmVydFZhbHVlKGVsLCB2YWx1ZSk7XG5cbiAgICAgIHRoaXMuc2V0Q2FyZXQoZWwsIHN0YXJ0LCBlbmQpO1xuXG4gICAgfVxuXG4gIH1cblxufVxuIiwiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5neFVwcGVyQ2FzZURpcmVjdGl2ZSB9IGZyb20gJy4vbmd4LXVwcGVyLWNhc2UuZGlyZWN0aXZlJztcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW10sXG4gIGRlY2xhcmF0aW9uczogW05neFVwcGVyQ2FzZURpcmVjdGl2ZV0sXG4gIGV4cG9ydHM6IFtOZ3hVcHBlckNhc2VEaXJlY3RpdmVdLFxufSlcbmV4cG9ydCBjbGFzcyBOZ3hVcHBlckNhc2VEaXJlY3RpdmVNb2R1bGUge1xufVxuIl0sIm5hbWVzIjpbIkRpcmVjdGl2ZSIsIklucHV0IiwiSG9zdExpc3RlbmVyIiwiTmdNb2R1bGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTs7Ozs7OztRQWFVLHdDQUFROzs7O3NCQUFFLEVBQUU7Z0JBRWxCLE9BQU87b0JBQ0wsS0FBSyxFQUFFLEVBQUUsQ0FBQyxjQUFjO29CQUN4QixHQUFHLEVBQUUsRUFBRSxDQUFDLFlBQVk7aUJBQ3JCLENBQUM7Ozs7Ozs7O1FBSUksd0NBQVE7Ozs7OztzQkFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLEdBQUc7Z0JBRTlCLEVBQUUsQ0FBQyxjQUFjLEdBQUcsS0FBSyxDQUFDO2dCQUMxQixFQUFFLENBQUMsWUFBWSxHQUFHLEdBQUcsQ0FBQztnQkFFdEIsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDOzs7Ozs7O1FBSUwsNkNBQWE7Ozs7O3NCQUFFLEVBQUUsRUFBRSxTQUFTO2dCQUVsQyxxQkFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFDNUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO2dCQUN6QyxFQUFFLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDOzs7Ozs7O1FBSWxCLDRDQUFZOzs7OztzQkFBRSxFQUFFLEVBQUUsS0FBSztnQkFFN0IsRUFBRSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsV0FBVyxFQUFFLENBQUM7Z0JBRS9CLElBQUksQ0FBQyxhQUFhLENBQUMsRUFBRSxFQUFFLE9BQU8sQ0FBQyxDQUFDOzs7Ozs7O1FBS2xDLHNDQUFNOzs7OztzQkFBRSxFQUFPLEVBQUUsS0FBYTtnQkFFNUIsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsSUFBSSxNQUFNLEtBQUssSUFBSSxDQUFDLFNBQVMsS0FBSyxVQUFVLEtBQUssT0FBTyxLQUFLLENBQUMsV0FBVyxJQUFJLEtBQUssQ0FBQyxXQUFXLEVBQUUsS0FBSyxLQUFLLEVBQUU7b0JBRTlILElBQUksQ0FBQyxZQUFZLENBQUMsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO29CQUM3QixJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQztpQkFFaEM7Ozs7Ozs7UUFLSCx1Q0FBTzs7Ozs7c0JBQUUsRUFBTyxFQUFFLEtBQWE7Z0JBRTdCLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxJQUFJLFVBQVUsS0FBSyxPQUFPLEtBQUssQ0FBQyxXQUFXLElBQUksS0FBSyxDQUFDLFdBQVcsRUFBRSxLQUFLLEtBQUssRUFBRTtvQkFFL0YsNEJBQU0sZ0JBQUssRUFBRSxZQUFHLENBQXVCO29CQUV2QyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLElBQUksS0FBSyxLQUFLLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxFQUFFO3dCQUVoRCxLQUFLLEdBQUcsQ0FBQyxDQUFDO3dCQUNWLEdBQUcsR0FBRyxDQUFDLENBQUM7cUJBRVQ7b0JBRUQsSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7b0JBRTdCLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxFQUFFLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztpQkFFL0I7OztvQkF2RUpBLGNBQVMsU0FBQzt3QkFDVCxRQUFRLEVBQUUsd0VBQXdFO3FCQUNuRjs7OztrQ0FHRUMsVUFBSzsrQkFvQ0xDLGlCQUFZLFNBQUMsTUFBTSxFQUFFLENBQUMsZUFBZSxFQUFFLHFCQUFxQixDQUFDO2dDQVk3REEsaUJBQVksU0FBQyxPQUFPLEVBQUUsQ0FBQyxlQUFlLEVBQUUscUJBQXFCLENBQUM7O29DQTNEakU7Ozs7Ozs7QUNBQTs7OztvQkFHQ0MsYUFBUSxTQUFDO3dCQUNSLE9BQU8sRUFBRSxFQUFFO3dCQUNYLFlBQVksRUFBRSxDQUFDLHFCQUFxQixDQUFDO3dCQUNyQyxPQUFPLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQztxQkFDakM7OzBDQVBEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=