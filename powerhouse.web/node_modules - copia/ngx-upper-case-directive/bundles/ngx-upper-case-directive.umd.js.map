{"version":3,"file":"ngx-upper-case-directive.umd.js.map","sources":["ng://ngx-upper-case-directive/ngx-upper-case.directive.ts","ng://ngx-upper-case-directive/ngx-upper-case-directive.module.ts"],"sourcesContent":["import {\n  Directive,\n  HostListener,\n  Input,\n} from '@angular/core';\n\n@Directive({\n  selector: 'input[upperCase]:not([lowerCase]),textarea[upperCase]:not([lowerCase])',\n})\nexport class NgxUpperCaseDirective {\n\n  @Input() upperCase: string;\n\n  private getCaret (el) {\n\n    return {\n      start: el.selectionStart,\n      end: el.selectionEnd,\n    };\n\n  }\n\n  private setCaret (el, start, end) {\n\n    el.selectionStart = start;\n    el.selectionEnd = end;\n\n    el.focus();\n\n  }\n\n  private dispatchEvent (el, eventType) {\n\n    const event = document.createEvent('Event');\n    event.initEvent(eventType, false, false);\n    el.dispatchEvent(event);\n\n  }\n\n  private convertValue (el, value) {\n\n    el.value = value.toUpperCase();\n\n    this.dispatchEvent(el, 'input');\n\n  }\n\n  @HostListener('blur', ['$event.target', '$event.target.value'])\n  onBlur (el: any, value: string): void {\n\n    if ((!this.upperCase || 'blur' === this.upperCase) && 'function' === typeof value.toUpperCase && value.toUpperCase() !== value) {\n\n      this.convertValue(el, value);\n      this.dispatchEvent(el, 'blur'); // in case updateOn is set to blur\n\n    }\n\n  }\n\n  @HostListener('input', ['$event.target', '$event.target.value'])\n  onInput (el: any, value: string): void {\n\n    if (!this.upperCase && 'function' === typeof value.toUpperCase && value.toUpperCase() !== value) {\n\n      let { start, end } = this.getCaret(el);\n\n      if (value[0] === ' ' && start === 1 && end === 1) {\n\n        start = 0;\n        end = 0;\n\n      }\n\n      this.convertValue(el, value);\n\n      this.setCaret(el, start, end);\n\n    }\n\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { NgxUpperCaseDirective } from './ngx-upper-case.directive';\n\n@NgModule({\n  imports: [],\n  declarations: [NgxUpperCaseDirective],\n  exports: [NgxUpperCaseDirective],\n})\nexport class NgxUpperCaseDirectiveModule {\n}\n"],"names":["Directive","Input","HostListener","NgModule"],"mappings":";;;;;;;;;;AAAA;;;;;;;QAaU,wCAAQ;;;;sBAAE,EAAE;gBAElB,OAAO;oBACL,KAAK,EAAE,EAAE,CAAC,cAAc;oBACxB,GAAG,EAAE,EAAE,CAAC,YAAY;iBACrB,CAAC;;;;;;;;QAII,wCAAQ;;;;;;sBAAE,EAAE,EAAE,KAAK,EAAE,GAAG;gBAE9B,EAAE,CAAC,cAAc,GAAG,KAAK,CAAC;gBAC1B,EAAE,CAAC,YAAY,GAAG,GAAG,CAAC;gBAEtB,EAAE,CAAC,KAAK,EAAE,CAAC;;;;;;;QAIL,6CAAa;;;;;sBAAE,EAAE,EAAE,SAAS;gBAElC,qBAAM,KAAK,GAAG,QAAQ,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;gBAC5C,KAAK,CAAC,SAAS,CAAC,SAAS,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;gBACzC,EAAE,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;;;;;;;QAIlB,4CAAY;;;;;sBAAE,EAAE,EAAE,KAAK;gBAE7B,EAAE,CAAC,KAAK,GAAG,KAAK,CAAC,WAAW,EAAE,CAAC;gBAE/B,IAAI,CAAC,aAAa,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;;;;;;;QAKlC,sCAAM;;;;;sBAAE,EAAO,EAAE,KAAa;gBAE5B,IAAI,CAAC,CAAC,IAAI,CAAC,SAAS,IAAI,MAAM,KAAK,IAAI,CAAC,SAAS,KAAK,UAAU,KAAK,OAAO,KAAK,CAAC,WAAW,IAAI,KAAK,CAAC,WAAW,EAAE,KAAK,KAAK,EAAE;oBAE9H,IAAI,CAAC,YAAY,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;oBAC7B,IAAI,CAAC,aAAa,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;iBAEhC;;;;;;;QAKH,uCAAO;;;;;sBAAE,EAAO,EAAE,KAAa;gBAE7B,IAAI,CAAC,IAAI,CAAC,SAAS,IAAI,UAAU,KAAK,OAAO,KAAK,CAAC,WAAW,IAAI,KAAK,CAAC,WAAW,EAAE,KAAK,KAAK,EAAE;oBAE/F,4BAAM,gBAAK,EAAE,YAAG,CAAuB;oBAEvC,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,KAAK,KAAK,CAAC,IAAI,GAAG,KAAK,CAAC,EAAE;wBAEhD,KAAK,GAAG,CAAC,CAAC;wBACV,GAAG,GAAG,CAAC,CAAC;qBAET;oBAED,IAAI,CAAC,YAAY,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;oBAE7B,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;iBAE/B;;;oBAvEJA,cAAS,SAAC;wBACT,QAAQ,EAAE,wEAAwE;qBACnF;;;;kCAGEC,UAAK;+BAoCLC,iBAAY,SAAC,MAAM,EAAE,CAAC,eAAe,EAAE,qBAAqB,CAAC;gCAY7DA,iBAAY,SAAC,OAAO,EAAE,CAAC,eAAe,EAAE,qBAAqB,CAAC;;oCA3DjE;;;;;;;ACAA;;;;oBAGCC,aAAQ,SAAC;wBACR,OAAO,EAAE,EAAE;wBACX,YAAY,EAAE,CAAC,qBAAqB,CAAC;wBACrC,OAAO,EAAE,CAAC,qBAAqB,CAAC;qBACjC;;0CAPD;;;;;;;;;;;;;;;;;;;;;;;;"}
