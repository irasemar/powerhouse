{"version":3,"file":"ngx-upper-case-directive.js.map","sources":["ng://ngx-upper-case-directive/ngx-upper-case.directive.ts","ng://ngx-upper-case-directive/ngx-upper-case-directive.module.ts"],"sourcesContent":["import {\n  Directive,\n  HostListener,\n  Input,\n} from '@angular/core';\n\n@Directive({\n  selector: 'input[upperCase]:not([lowerCase]),textarea[upperCase]:not([lowerCase])',\n})\nexport class NgxUpperCaseDirective {\n\n  @Input() upperCase: string;\n\n  private getCaret (el) {\n\n    return {\n      start: el.selectionStart,\n      end: el.selectionEnd,\n    };\n\n  }\n\n  private setCaret (el, start, end) {\n\n    el.selectionStart = start;\n    el.selectionEnd = end;\n\n    el.focus();\n\n  }\n\n  private dispatchEvent (el, eventType) {\n\n    const event = document.createEvent('Event');\n    event.initEvent(eventType, false, false);\n    el.dispatchEvent(event);\n\n  }\n\n  private convertValue (el, value) {\n\n    el.value = value.toUpperCase();\n\n    this.dispatchEvent(el, 'input');\n\n  }\n\n  @HostListener('blur', ['$event.target', '$event.target.value'])\n  onBlur (el: any, value: string): void {\n\n    if ((!this.upperCase || 'blur' === this.upperCase) && 'function' === typeof value.toUpperCase && value.toUpperCase() !== value) {\n\n      this.convertValue(el, value);\n      this.dispatchEvent(el, 'blur'); // in case updateOn is set to blur\n\n    }\n\n  }\n\n  @HostListener('input', ['$event.target', '$event.target.value'])\n  onInput (el: any, value: string): void {\n\n    if (!this.upperCase && 'function' === typeof value.toUpperCase && value.toUpperCase() !== value) {\n\n      let { start, end } = this.getCaret(el);\n\n      if (value[0] === ' ' && start === 1 && end === 1) {\n\n        start = 0;\n        end = 0;\n\n      }\n\n      this.convertValue(el, value);\n\n      this.setCaret(el, start, end);\n\n    }\n\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { NgxUpperCaseDirective } from './ngx-upper-case.directive';\n\n@NgModule({\n  imports: [],\n  declarations: [NgxUpperCaseDirective],\n  exports: [NgxUpperCaseDirective],\n})\nexport class NgxUpperCaseDirectiveModule {\n}\n"],"names":[],"mappings":";;;;;;AAAA;;;;;;;IAaU,wCAAQ;;;;cAAE,EAAE;QAElB,OAAO;YACL,KAAK,EAAE,EAAE,CAAC,cAAc;YACxB,GAAG,EAAE,EAAE,CAAC,YAAY;SACrB,CAAC;;;;;;;;IAII,wCAAQ;;;;;;cAAE,EAAE,EAAE,KAAK,EAAE,GAAG;QAE9B,EAAE,CAAC,cAAc,GAAG,KAAK,CAAC;QAC1B,EAAE,CAAC,YAAY,GAAG,GAAG,CAAC;QAEtB,EAAE,CAAC,KAAK,EAAE,CAAC;;;;;;;IAIL,6CAAa;;;;;cAAE,EAAE,EAAE,SAAS;QAElC,qBAAM,KAAK,GAAG,QAAQ,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;QAC5C,KAAK,CAAC,SAAS,CAAC,SAAS,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;QACzC,EAAE,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;;;;;;;IAIlB,4CAAY;;;;;cAAE,EAAE,EAAE,KAAK;QAE7B,EAAE,CAAC,KAAK,GAAG,KAAK,CAAC,WAAW,EAAE,CAAC;QAE/B,IAAI,CAAC,aAAa,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;;;;;;;IAKlC,sCAAM;;;;;cAAE,EAAO,EAAE,KAAa;QAE5B,IAAI,CAAC,CAAC,IAAI,CAAC,SAAS,IAAI,MAAM,KAAK,IAAI,CAAC,SAAS,KAAK,UAAU,KAAK,OAAO,KAAK,CAAC,WAAW,IAAI,KAAK,CAAC,WAAW,EAAE,KAAK,KAAK,EAAE;YAE9H,IAAI,CAAC,YAAY,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;YAC7B,IAAI,CAAC,aAAa,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;SAEhC;;;;;;;IAKH,uCAAO;;;;;cAAE,EAAO,EAAE,KAAa;QAE7B,IAAI,CAAC,IAAI,CAAC,SAAS,IAAI,UAAU,KAAK,OAAO,KAAK,CAAC,WAAW,IAAI,KAAK,CAAC,WAAW,EAAE,KAAK,KAAK,EAAE;YAE/F,4BAAM,gBAAK,EAAE,YAAG,CAAuB;YAEvC,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,KAAK,KAAK,CAAC,IAAI,GAAG,KAAK,CAAC,EAAE;gBAEhD,KAAK,GAAG,CAAC,CAAC;gBACV,GAAG,GAAG,CAAC,CAAC;aAET;YAED,IAAI,CAAC,YAAY,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;YAE7B,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;SAE/B;;;gBAvEJ,SAAS,SAAC;oBACT,QAAQ,EAAE,wEAAwE;iBACnF;;;;8BAGE,KAAK;2BAoCL,YAAY,SAAC,MAAM,EAAE,CAAC,eAAe,EAAE,qBAAqB,CAAC;4BAY7D,YAAY,SAAC,OAAO,EAAE,CAAC,eAAe,EAAE,qBAAqB,CAAC;;gCA3DjE;;;;;;;ACAA;;;;gBAGC,QAAQ,SAAC;oBACR,OAAO,EAAE,EAAE;oBACX,YAAY,EAAE,CAAC,qBAAqB,CAAC;oBACrC,OAAO,EAAE,CAAC,qBAAqB,CAAC;iBACjC;;sCAPD;;;;;;;;;;;;;;;"}
