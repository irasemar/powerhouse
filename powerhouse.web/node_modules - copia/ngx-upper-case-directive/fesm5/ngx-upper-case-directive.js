import { Directive, HostListener, Input, NgModule } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var NgxUpperCaseDirective = /** @class */ (function () {
    function NgxUpperCaseDirective() {
    }
    /**
     * @param {?} el
     * @return {?}
     */
    NgxUpperCaseDirective.prototype.getCaret = /**
     * @param {?} el
     * @return {?}
     */
    function (el) {
        return {
            start: el.selectionStart,
            end: el.selectionEnd,
        };
    };
    /**
     * @param {?} el
     * @param {?} start
     * @param {?} end
     * @return {?}
     */
    NgxUpperCaseDirective.prototype.setCaret = /**
     * @param {?} el
     * @param {?} start
     * @param {?} end
     * @return {?}
     */
    function (el, start, end) {
        el.selectionStart = start;
        el.selectionEnd = end;
        el.focus();
    };
    /**
     * @param {?} el
     * @param {?} eventType
     * @return {?}
     */
    NgxUpperCaseDirective.prototype.dispatchEvent = /**
     * @param {?} el
     * @param {?} eventType
     * @return {?}
     */
    function (el, eventType) {
        var /** @type {?} */ event = document.createEvent('Event');
        event.initEvent(eventType, false, false);
        el.dispatchEvent(event);
    };
    /**
     * @param {?} el
     * @param {?} value
     * @return {?}
     */
    NgxUpperCaseDirective.prototype.convertValue = /**
     * @param {?} el
     * @param {?} value
     * @return {?}
     */
    function (el, value) {
        el.value = value.toUpperCase();
        this.dispatchEvent(el, 'input');
    };
    /**
     * @param {?} el
     * @param {?} value
     * @return {?}
     */
    NgxUpperCaseDirective.prototype.onBlur = /**
     * @param {?} el
     * @param {?} value
     * @return {?}
     */
    function (el, value) {
        if ((!this.upperCase || 'blur' === this.upperCase) && 'function' === typeof value.toUpperCase && value.toUpperCase() !== value) {
            this.convertValue(el, value);
            this.dispatchEvent(el, 'blur'); // in case updateOn is set to blur
        }
    };
    /**
     * @param {?} el
     * @param {?} value
     * @return {?}
     */
    NgxUpperCaseDirective.prototype.onInput = /**
     * @param {?} el
     * @param {?} value
     * @return {?}
     */
    function (el, value) {
        if (!this.upperCase && 'function' === typeof value.toUpperCase && value.toUpperCase() !== value) {
            var _a = this.getCaret(el), start = _a.start, end = _a.end;
            if (value[0] === ' ' && start === 1 && end === 1) {
                start = 0;
                end = 0;
            }
            this.convertValue(el, value);
            this.setCaret(el, start, end);
        }
    };
    NgxUpperCaseDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'input[upperCase]:not([lowerCase]),textarea[upperCase]:not([lowerCase])',
                },] },
    ];
    /** @nocollapse */
    NgxUpperCaseDirective.propDecorators = {
        "upperCase": [{ type: Input },],
        "onBlur": [{ type: HostListener, args: ['blur', ['$event.target', '$event.target.value'],] },],
        "onInput": [{ type: HostListener, args: ['input', ['$event.target', '$event.target.value'],] },],
    };
    return NgxUpperCaseDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var NgxUpperCaseDirectiveModule = /** @class */ (function () {
    function NgxUpperCaseDirectiveModule() {
    }
    NgxUpperCaseDirectiveModule.decorators = [
        { type: NgModule, args: [{
                    imports: [],
                    declarations: [NgxUpperCaseDirective],
                    exports: [NgxUpperCaseDirective],
                },] },
    ];
    return NgxUpperCaseDirectiveModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { NgxUpperCaseDirective, NgxUpperCaseDirectiveModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXVwcGVyLWNhc2UtZGlyZWN0aXZlLmpzLm1hcCIsInNvdXJjZXMiOlsibmc6Ly9uZ3gtdXBwZXItY2FzZS1kaXJlY3RpdmUvbmd4LXVwcGVyLWNhc2UuZGlyZWN0aXZlLnRzIiwibmc6Ly9uZ3gtdXBwZXItY2FzZS1kaXJlY3RpdmUvbmd4LXVwcGVyLWNhc2UtZGlyZWN0aXZlLm1vZHVsZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBEaXJlY3RpdmUsXG4gIEhvc3RMaXN0ZW5lcixcbiAgSW5wdXQsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdpbnB1dFt1cHBlckNhc2VdOm5vdChbbG93ZXJDYXNlXSksdGV4dGFyZWFbdXBwZXJDYXNlXTpub3QoW2xvd2VyQ2FzZV0pJyxcbn0pXG5leHBvcnQgY2xhc3MgTmd4VXBwZXJDYXNlRGlyZWN0aXZlIHtcblxuICBASW5wdXQoKSB1cHBlckNhc2U6IHN0cmluZztcblxuICBwcml2YXRlIGdldENhcmV0IChlbCkge1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXJ0OiBlbC5zZWxlY3Rpb25TdGFydCxcbiAgICAgIGVuZDogZWwuc2VsZWN0aW9uRW5kLFxuICAgIH07XG5cbiAgfVxuXG4gIHByaXZhdGUgc2V0Q2FyZXQgKGVsLCBzdGFydCwgZW5kKSB7XG5cbiAgICBlbC5zZWxlY3Rpb25TdGFydCA9IHN0YXJ0O1xuICAgIGVsLnNlbGVjdGlvbkVuZCA9IGVuZDtcblxuICAgIGVsLmZvY3VzKCk7XG5cbiAgfVxuXG4gIHByaXZhdGUgZGlzcGF0Y2hFdmVudCAoZWwsIGV2ZW50VHlwZSkge1xuXG4gICAgY29uc3QgZXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKTtcbiAgICBldmVudC5pbml0RXZlbnQoZXZlbnRUeXBlLCBmYWxzZSwgZmFsc2UpO1xuICAgIGVsLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuXG4gIH1cblxuICBwcml2YXRlIGNvbnZlcnRWYWx1ZSAoZWwsIHZhbHVlKSB7XG5cbiAgICBlbC52YWx1ZSA9IHZhbHVlLnRvVXBwZXJDYXNlKCk7XG5cbiAgICB0aGlzLmRpc3BhdGNoRXZlbnQoZWwsICdpbnB1dCcpO1xuXG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdibHVyJywgWyckZXZlbnQudGFyZ2V0JywgJyRldmVudC50YXJnZXQudmFsdWUnXSlcbiAgb25CbHVyIChlbDogYW55LCB2YWx1ZTogc3RyaW5nKTogdm9pZCB7XG5cbiAgICBpZiAoKCF0aGlzLnVwcGVyQ2FzZSB8fCAnYmx1cicgPT09IHRoaXMudXBwZXJDYXNlKSAmJiAnZnVuY3Rpb24nID09PSB0eXBlb2YgdmFsdWUudG9VcHBlckNhc2UgJiYgdmFsdWUudG9VcHBlckNhc2UoKSAhPT0gdmFsdWUpIHtcblxuICAgICAgdGhpcy5jb252ZXJ0VmFsdWUoZWwsIHZhbHVlKTtcbiAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChlbCwgJ2JsdXInKTsgLy8gaW4gY2FzZSB1cGRhdGVPbiBpcyBzZXQgdG8gYmx1clxuXG4gICAgfVxuXG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdpbnB1dCcsIFsnJGV2ZW50LnRhcmdldCcsICckZXZlbnQudGFyZ2V0LnZhbHVlJ10pXG4gIG9uSW5wdXQgKGVsOiBhbnksIHZhbHVlOiBzdHJpbmcpOiB2b2lkIHtcblxuICAgIGlmICghdGhpcy51cHBlckNhc2UgJiYgJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIHZhbHVlLnRvVXBwZXJDYXNlICYmIHZhbHVlLnRvVXBwZXJDYXNlKCkgIT09IHZhbHVlKSB7XG5cbiAgICAgIGxldCB7IHN0YXJ0LCBlbmQgfSA9IHRoaXMuZ2V0Q2FyZXQoZWwpO1xuXG4gICAgICBpZiAodmFsdWVbMF0gPT09ICcgJyAmJiBzdGFydCA9PT0gMSAmJiBlbmQgPT09IDEpIHtcblxuICAgICAgICBzdGFydCA9IDA7XG4gICAgICAgIGVuZCA9IDA7XG5cbiAgICAgIH1cblxuICAgICAgdGhpcy5jb252ZXJ0VmFsdWUoZWwsIHZhbHVlKTtcblxuICAgICAgdGhpcy5zZXRDYXJldChlbCwgc3RhcnQsIGVuZCk7XG5cbiAgICB9XG5cbiAgfVxuXG59XG4iLCJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmd4VXBwZXJDYXNlRGlyZWN0aXZlIH0gZnJvbSAnLi9uZ3gtdXBwZXItY2FzZS5kaXJlY3RpdmUnO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbXSxcbiAgZGVjbGFyYXRpb25zOiBbTmd4VXBwZXJDYXNlRGlyZWN0aXZlXSxcbiAgZXhwb3J0czogW05neFVwcGVyQ2FzZURpcmVjdGl2ZV0sXG59KVxuZXhwb3J0IGNsYXNzIE5neFVwcGVyQ2FzZURpcmVjdGl2ZU1vZHVsZSB7XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7Ozs7SUFhVSx3Q0FBUTs7OztjQUFFLEVBQUU7UUFFbEIsT0FBTztZQUNMLEtBQUssRUFBRSxFQUFFLENBQUMsY0FBYztZQUN4QixHQUFHLEVBQUUsRUFBRSxDQUFDLFlBQVk7U0FDckIsQ0FBQzs7Ozs7Ozs7SUFJSSx3Q0FBUTs7Ozs7O2NBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxHQUFHO1FBRTlCLEVBQUUsQ0FBQyxjQUFjLEdBQUcsS0FBSyxDQUFDO1FBQzFCLEVBQUUsQ0FBQyxZQUFZLEdBQUcsR0FBRyxDQUFDO1FBRXRCLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQzs7Ozs7OztJQUlMLDZDQUFhOzs7OztjQUFFLEVBQUUsRUFBRSxTQUFTO1FBRWxDLHFCQUFNLEtBQUssR0FBRyxRQUFRLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzVDLEtBQUssQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN6QyxFQUFFLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDOzs7Ozs7O0lBSWxCLDRDQUFZOzs7OztjQUFFLEVBQUUsRUFBRSxLQUFLO1FBRTdCLEVBQUUsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBRS9CLElBQUksQ0FBQyxhQUFhLENBQUMsRUFBRSxFQUFFLE9BQU8sQ0FBQyxDQUFDOzs7Ozs7O0lBS2xDLHNDQUFNOzs7OztjQUFFLEVBQU8sRUFBRSxLQUFhO1FBRTVCLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLElBQUksTUFBTSxLQUFLLElBQUksQ0FBQyxTQUFTLEtBQUssVUFBVSxLQUFLLE9BQU8sS0FBSyxDQUFDLFdBQVcsSUFBSSxLQUFLLENBQUMsV0FBVyxFQUFFLEtBQUssS0FBSyxFQUFFO1lBRTlILElBQUksQ0FBQyxZQUFZLENBQUMsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQzdCLElBQUksQ0FBQyxhQUFhLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1NBRWhDOzs7Ozs7O0lBS0gsdUNBQU87Ozs7O2NBQUUsRUFBTyxFQUFFLEtBQWE7UUFFN0IsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLElBQUksVUFBVSxLQUFLLE9BQU8sS0FBSyxDQUFDLFdBQVcsSUFBSSxLQUFLLENBQUMsV0FBVyxFQUFFLEtBQUssS0FBSyxFQUFFO1lBRS9GLDRCQUFNLGdCQUFLLEVBQUUsWUFBRyxDQUF1QjtZQUV2QyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLElBQUksS0FBSyxLQUFLLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxFQUFFO2dCQUVoRCxLQUFLLEdBQUcsQ0FBQyxDQUFDO2dCQUNWLEdBQUcsR0FBRyxDQUFDLENBQUM7YUFFVDtZQUVELElBQUksQ0FBQyxZQUFZLENBQUMsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBRTdCLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxFQUFFLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztTQUUvQjs7O2dCQXZFSixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLHdFQUF3RTtpQkFDbkY7Ozs7OEJBR0UsS0FBSzsyQkFvQ0wsWUFBWSxTQUFDLE1BQU0sRUFBRSxDQUFDLGVBQWUsRUFBRSxxQkFBcUIsQ0FBQzs0QkFZN0QsWUFBWSxTQUFDLE9BQU8sRUFBRSxDQUFDLGVBQWUsRUFBRSxxQkFBcUIsQ0FBQzs7Z0NBM0RqRTs7Ozs7OztBQ0FBOzs7O2dCQUdDLFFBQVEsU0FBQztvQkFDUixPQUFPLEVBQUUsRUFBRTtvQkFDWCxZQUFZLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQztvQkFDckMsT0FBTyxFQUFFLENBQUMscUJBQXFCLENBQUM7aUJBQ2pDOztzQ0FQRDs7Ozs7Ozs7Ozs7Ozs7OyJ9