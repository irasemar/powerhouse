/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Directive, HostListener, Input, } from '@angular/core';
var NgxUpperCaseDirective = /** @class */ (function () {
    function NgxUpperCaseDirective() {
    }
    /**
     * @param {?} el
     * @return {?}
     */
    NgxUpperCaseDirective.prototype.getCaret = /**
     * @param {?} el
     * @return {?}
     */
    function (el) {
        return {
            start: el.selectionStart,
            end: el.selectionEnd,
        };
    };
    /**
     * @param {?} el
     * @param {?} start
     * @param {?} end
     * @return {?}
     */
    NgxUpperCaseDirective.prototype.setCaret = /**
     * @param {?} el
     * @param {?} start
     * @param {?} end
     * @return {?}
     */
    function (el, start, end) {
        el.selectionStart = start;
        el.selectionEnd = end;
        el.focus();
    };
    /**
     * @param {?} el
     * @param {?} eventType
     * @return {?}
     */
    NgxUpperCaseDirective.prototype.dispatchEvent = /**
     * @param {?} el
     * @param {?} eventType
     * @return {?}
     */
    function (el, eventType) {
        var /** @type {?} */ event = document.createEvent('Event');
        event.initEvent(eventType, false, false);
        el.dispatchEvent(event);
    };
    /**
     * @param {?} el
     * @param {?} value
     * @return {?}
     */
    NgxUpperCaseDirective.prototype.convertValue = /**
     * @param {?} el
     * @param {?} value
     * @return {?}
     */
    function (el, value) {
        el.value = value.toUpperCase();
        this.dispatchEvent(el, 'input');
    };
    /**
     * @param {?} el
     * @param {?} value
     * @return {?}
     */
    NgxUpperCaseDirective.prototype.onBlur = /**
     * @param {?} el
     * @param {?} value
     * @return {?}
     */
    function (el, value) {
        if ((!this.upperCase || 'blur' === this.upperCase) && 'function' === typeof value.toUpperCase && value.toUpperCase() !== value) {
            this.convertValue(el, value);
            this.dispatchEvent(el, 'blur'); // in case updateOn is set to blur
        }
    };
    /**
     * @param {?} el
     * @param {?} value
     * @return {?}
     */
    NgxUpperCaseDirective.prototype.onInput = /**
     * @param {?} el
     * @param {?} value
     * @return {?}
     */
    function (el, value) {
        if (!this.upperCase && 'function' === typeof value.toUpperCase && value.toUpperCase() !== value) {
            var _a = this.getCaret(el), start = _a.start, end = _a.end;
            if (value[0] === ' ' && start === 1 && end === 1) {
                start = 0;
                end = 0;
            }
            this.convertValue(el, value);
            this.setCaret(el, start, end);
        }
    };
    NgxUpperCaseDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'input[upperCase]:not([lowerCase]),textarea[upperCase]:not([lowerCase])',
                },] },
    ];
    /** @nocollapse */
    NgxUpperCaseDirective.propDecorators = {
        "upperCase": [{ type: Input },],
        "onBlur": [{ type: HostListener, args: ['blur', ['$event.target', '$event.target.value'],] },],
        "onInput": [{ type: HostListener, args: ['input', ['$event.target', '$event.target.value'],] },],
    };
    return NgxUpperCaseDirective;
}());
export { NgxUpperCaseDirective };
function NgxUpperCaseDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    NgxUpperCaseDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    NgxUpperCaseDirective.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    NgxUpperCaseDirective.propDecorators;
    /** @type {?} */
    NgxUpperCaseDirective.prototype.upperCase;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXVwcGVyLWNhc2UuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXVwcGVyLWNhc2UtZGlyZWN0aXZlLyIsInNvdXJjZXMiOlsibmd4LXVwcGVyLWNhc2UuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFlBQVksRUFDWixLQUFLLEdBQ04sTUFBTSxlQUFlLENBQUM7Ozs7Ozs7O0lBU2Isd0NBQVE7Ozs7Y0FBRSxFQUFFO1FBRWxCLE1BQU0sQ0FBQztZQUNMLEtBQUssRUFBRSxFQUFFLENBQUMsY0FBYztZQUN4QixHQUFHLEVBQUUsRUFBRSxDQUFDLFlBQVk7U0FDckIsQ0FBQzs7Ozs7Ozs7SUFJSSx3Q0FBUTs7Ozs7O2NBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxHQUFHO1FBRTlCLEVBQUUsQ0FBQyxjQUFjLEdBQUcsS0FBSyxDQUFDO1FBQzFCLEVBQUUsQ0FBQyxZQUFZLEdBQUcsR0FBRyxDQUFDO1FBRXRCLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQzs7Ozs7OztJQUlMLDZDQUFhOzs7OztjQUFFLEVBQUUsRUFBRSxTQUFTO1FBRWxDLHFCQUFNLEtBQUssR0FBRyxRQUFRLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzVDLEtBQUssQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN6QyxFQUFFLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDOzs7Ozs7O0lBSWxCLDRDQUFZOzs7OztjQUFFLEVBQUUsRUFBRSxLQUFLO1FBRTdCLEVBQUUsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBRS9CLElBQUksQ0FBQyxhQUFhLENBQUMsRUFBRSxFQUFFLE9BQU8sQ0FBQyxDQUFDOzs7Ozs7O0lBS2xDLHNDQUFNOzs7OztjQUFFLEVBQU8sRUFBRSxLQUFhO1FBRTVCLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxJQUFJLE1BQU0sS0FBSyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksVUFBVSxLQUFLLE9BQU8sS0FBSyxDQUFDLFdBQVcsSUFBSSxLQUFLLENBQUMsV0FBVyxFQUFFLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQztZQUUvSCxJQUFJLENBQUMsWUFBWSxDQUFDLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztZQUM3QixJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQztTQUVoQzs7Ozs7OztJQUtILHVDQUFPOzs7OztjQUFFLEVBQU8sRUFBRSxLQUFhO1FBRTdCLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsSUFBSSxVQUFVLEtBQUssT0FBTyxLQUFLLENBQUMsV0FBVyxJQUFJLEtBQUssQ0FBQyxXQUFXLEVBQUUsS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBRWhHLDRCQUFNLGdCQUFLLEVBQUUsWUFBRyxDQUF1QjtZQUV2QyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxJQUFJLEtBQUssS0FBSyxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBRWpELEtBQUssR0FBRyxDQUFDLENBQUM7Z0JBQ1YsR0FBRyxHQUFHLENBQUMsQ0FBQzthQUVUO1lBRUQsSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFFN0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1NBRS9COzs7Z0JBdkVKLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsd0VBQXdFO2lCQUNuRjs7Ozs4QkFHRSxLQUFLOzJCQW9DTCxZQUFZLFNBQUMsTUFBTSxFQUFFLENBQUMsZUFBZSxFQUFFLHFCQUFxQixDQUFDOzRCQVk3RCxZQUFZLFNBQUMsT0FBTyxFQUFFLENBQUMsZUFBZSxFQUFFLHFCQUFxQixDQUFDOztnQ0EzRGpFOztTQVNhLHFCQUFxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIERpcmVjdGl2ZSxcbiAgSG9zdExpc3RlbmVyLFxuICBJbnB1dCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ2lucHV0W3VwcGVyQ2FzZV06bm90KFtsb3dlckNhc2VdKSx0ZXh0YXJlYVt1cHBlckNhc2VdOm5vdChbbG93ZXJDYXNlXSknLFxufSlcbmV4cG9ydCBjbGFzcyBOZ3hVcHBlckNhc2VEaXJlY3RpdmUge1xuXG4gIEBJbnB1dCgpIHVwcGVyQ2FzZTogc3RyaW5nO1xuXG4gIHByaXZhdGUgZ2V0Q2FyZXQgKGVsKSB7XG5cbiAgICByZXR1cm4ge1xuICAgICAgc3RhcnQ6IGVsLnNlbGVjdGlvblN0YXJ0LFxuICAgICAgZW5kOiBlbC5zZWxlY3Rpb25FbmQsXG4gICAgfTtcblxuICB9XG5cbiAgcHJpdmF0ZSBzZXRDYXJldCAoZWwsIHN0YXJ0LCBlbmQpIHtcblxuICAgIGVsLnNlbGVjdGlvblN0YXJ0ID0gc3RhcnQ7XG4gICAgZWwuc2VsZWN0aW9uRW5kID0gZW5kO1xuXG4gICAgZWwuZm9jdXMoKTtcblxuICB9XG5cbiAgcHJpdmF0ZSBkaXNwYXRjaEV2ZW50IChlbCwgZXZlbnRUeXBlKSB7XG5cbiAgICBjb25zdCBldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpO1xuICAgIGV2ZW50LmluaXRFdmVudChldmVudFR5cGUsIGZhbHNlLCBmYWxzZSk7XG4gICAgZWwuZGlzcGF0Y2hFdmVudChldmVudCk7XG5cbiAgfVxuXG4gIHByaXZhdGUgY29udmVydFZhbHVlIChlbCwgdmFsdWUpIHtcblxuICAgIGVsLnZhbHVlID0gdmFsdWUudG9VcHBlckNhc2UoKTtcblxuICAgIHRoaXMuZGlzcGF0Y2hFdmVudChlbCwgJ2lucHV0Jyk7XG5cbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2JsdXInLCBbJyRldmVudC50YXJnZXQnLCAnJGV2ZW50LnRhcmdldC52YWx1ZSddKVxuICBvbkJsdXIgKGVsOiBhbnksIHZhbHVlOiBzdHJpbmcpOiB2b2lkIHtcblxuICAgIGlmICgoIXRoaXMudXBwZXJDYXNlIHx8ICdibHVyJyA9PT0gdGhpcy51cHBlckNhc2UpICYmICdmdW5jdGlvbicgPT09IHR5cGVvZiB2YWx1ZS50b1VwcGVyQ2FzZSAmJiB2YWx1ZS50b1VwcGVyQ2FzZSgpICE9PSB2YWx1ZSkge1xuXG4gICAgICB0aGlzLmNvbnZlcnRWYWx1ZShlbCwgdmFsdWUpO1xuICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KGVsLCAnYmx1cicpOyAvLyBpbiBjYXNlIHVwZGF0ZU9uIGlzIHNldCB0byBibHVyXG5cbiAgICB9XG5cbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2lucHV0JywgWyckZXZlbnQudGFyZ2V0JywgJyRldmVudC50YXJnZXQudmFsdWUnXSlcbiAgb25JbnB1dCAoZWw6IGFueSwgdmFsdWU6IHN0cmluZyk6IHZvaWQge1xuXG4gICAgaWYgKCF0aGlzLnVwcGVyQ2FzZSAmJiAnZnVuY3Rpb24nID09PSB0eXBlb2YgdmFsdWUudG9VcHBlckNhc2UgJiYgdmFsdWUudG9VcHBlckNhc2UoKSAhPT0gdmFsdWUpIHtcblxuICAgICAgbGV0IHsgc3RhcnQsIGVuZCB9ID0gdGhpcy5nZXRDYXJldChlbCk7XG5cbiAgICAgIGlmICh2YWx1ZVswXSA9PT0gJyAnICYmIHN0YXJ0ID09PSAxICYmIGVuZCA9PT0gMSkge1xuXG4gICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgICAgZW5kID0gMDtcblxuICAgICAgfVxuXG4gICAgICB0aGlzLmNvbnZlcnRWYWx1ZShlbCwgdmFsdWUpO1xuXG4gICAgICB0aGlzLnNldENhcmV0KGVsLCBzdGFydCwgZW5kKTtcblxuICAgIH1cblxuICB9XG5cbn1cbiJdfQ==