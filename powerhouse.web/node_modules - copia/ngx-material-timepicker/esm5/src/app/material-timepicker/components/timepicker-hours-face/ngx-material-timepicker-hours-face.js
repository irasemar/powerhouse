/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter, Input, Output } from '@angular/core';
import { DateTime } from 'luxon';
import { getHours } from '../../utils/timepicker-time.utils';
var NgxMaterialTimepickerHoursFace = /** @class */ (function () {
    function NgxMaterialTimepickerHoursFace(format) {
        this.hourChange = new EventEmitter();
        this.hourSelected = new EventEmitter();
        this.hoursList = [];
        this.hoursList = getHours(format);
    }
    /**
     * @param {?} time
     * @return {?}
     */
    NgxMaterialTimepickerHoursFace.prototype.onTimeSelected = /**
     * @param {?} time
     * @return {?}
     */
    function (time) {
        this.hourSelected.next(time);
    };
    NgxMaterialTimepickerHoursFace.propDecorators = {
        selectedHour: [{ type: Input }],
        minTime: [{ type: Input }],
        maxTime: [{ type: Input }],
        format: [{ type: Input }],
        hourChange: [{ type: Output }],
        hourSelected: [{ type: Output }]
    };
    return NgxMaterialTimepickerHoursFace;
}());
export { NgxMaterialTimepickerHoursFace };
if (false) {
    /** @type {?} */
    NgxMaterialTimepickerHoursFace.prototype.selectedHour;
    /** @type {?} */
    NgxMaterialTimepickerHoursFace.prototype.minTime;
    /** @type {?} */
    NgxMaterialTimepickerHoursFace.prototype.maxTime;
    /** @type {?} */
    NgxMaterialTimepickerHoursFace.prototype.format;
    /** @type {?} */
    NgxMaterialTimepickerHoursFace.prototype.hourChange;
    /** @type {?} */
    NgxMaterialTimepickerHoursFace.prototype.hourSelected;
    /** @type {?} */
    NgxMaterialTimepickerHoursFace.prototype.hoursList;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LW1hdGVyaWFsLXRpbWVwaWNrZXItaG91cnMtZmFjZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1tYXRlcmlhbC10aW1lcGlja2VyLyIsInNvdXJjZXMiOlsic3JjL2FwcC9tYXRlcmlhbC10aW1lcGlja2VyL2NvbXBvbmVudHMvdGltZXBpY2tlci1ob3Vycy1mYWNlL25neC1tYXRlcmlhbC10aW1lcGlja2VyLWhvdXJzLWZhY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM1RCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sT0FBTyxDQUFDO0FBRWpDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUc3RDtJQVlJLHdDQUFzQixNQUFjO1FBTDFCLGVBQVUsR0FBRyxJQUFJLFlBQVksRUFBaUIsQ0FBQztRQUMvQyxpQkFBWSxHQUFHLElBQUksWUFBWSxFQUFVLENBQUM7UUFFcEQsY0FBUyxHQUFvQixFQUFFLENBQUM7UUFHNUIsSUFBSSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDdEMsQ0FBQzs7Ozs7SUFFRCx1REFBYzs7OztJQUFkLFVBQWUsSUFBWTtRQUN2QixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNqQyxDQUFDOzsrQkFoQkEsS0FBSzswQkFDTCxLQUFLOzBCQUNMLEtBQUs7eUJBQ0wsS0FBSzs2QkFFTCxNQUFNOytCQUNOLE1BQU07O0lBV1gscUNBQUM7Q0FBQSxBQW5CRCxJQW1CQztTQW5CWSw4QkFBOEI7OztJQUV2QyxzREFBcUM7O0lBQ3JDLGlEQUEyQjs7SUFDM0IsaURBQTJCOztJQUMzQixnREFBd0I7O0lBRXhCLG9EQUF5RDs7SUFDekQsc0RBQW9EOztJQUVwRCxtREFBZ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERhdGVUaW1lIH0gZnJvbSAnbHV4b24nO1xuaW1wb3J0IHsgQ2xvY2tGYWNlVGltZSB9IGZyb20gJy4uLy4uL21vZGVscy9jbG9jay1mYWNlLXRpbWUuaW50ZXJmYWNlJztcbmltcG9ydCB7IGdldEhvdXJzIH0gZnJvbSAnLi4vLi4vdXRpbHMvdGltZXBpY2tlci10aW1lLnV0aWxzJztcblxuXG5leHBvcnQgY2xhc3MgTmd4TWF0ZXJpYWxUaW1lcGlja2VySG91cnNGYWNlIHtcblxuICAgIEBJbnB1dCgpIHNlbGVjdGVkSG91cjogQ2xvY2tGYWNlVGltZTtcbiAgICBASW5wdXQoKSBtaW5UaW1lOiBEYXRlVGltZTtcbiAgICBASW5wdXQoKSBtYXhUaW1lOiBEYXRlVGltZTtcbiAgICBASW5wdXQoKSBmb3JtYXQ6IG51bWJlcjtcblxuICAgIEBPdXRwdXQoKSBob3VyQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxDbG9ja0ZhY2VUaW1lPigpO1xuICAgIEBPdXRwdXQoKSBob3VyU2VsZWN0ZWQgPSBuZXcgRXZlbnRFbWl0dGVyPG51bWJlcj4oKTtcblxuICAgIGhvdXJzTGlzdDogQ2xvY2tGYWNlVGltZVtdID0gW107XG5cbiAgICBwcm90ZWN0ZWQgY29uc3RydWN0b3IoZm9ybWF0OiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5ob3Vyc0xpc3QgPSBnZXRIb3Vycyhmb3JtYXQpO1xuICAgIH1cblxuICAgIG9uVGltZVNlbGVjdGVkKHRpbWU6IG51bWJlcik6IHZvaWQge1xuICAgICAgICB0aGlzLmhvdXJTZWxlY3RlZC5uZXh0KHRpbWUpO1xuICAgIH1cbn1cbiJdfQ==